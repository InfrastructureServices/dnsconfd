#!/usr/bin/python3

from dnsconfd import DnsconfdContext
from dnsconfd import DnsconfdArgumentParser as argparser
from dnsconfd import NetworkManager

import signal
import logging
from gi.repository import GLib
import dbus
import dbus.mainloop.glib
from dbus import DBusException

if __name__ == "__main__":
    parser = argparser(prog='dnsconfd', description='local DNS cache configuration daemon')
    args = parser.parse_args()

    if args.status:
        bus = dbus.SystemBus()
        try:
            dnsconfd_object = bus.get_object(args.dbus_name, "/org/freedesktop/resolve1")
        except DBusException as e:
            print(f"Dnsconfd is not listening on name {args.dbus_name}")
            exit(1)
        try:
            print(dnsconfd_object.Status(dbus_interface='org.freedesktop.resolve1.Dnsconfd'))
        except DBusException as e:
            print("Was not able to call Status method, check your DBus policy")
            exit(1)
        exit(0)
    elif args.enable:
        try:
            NetworkManager().enable()
            print("Dnsconfd enabled successfully")
            exit(0)
        except Exception as e:
            raise(e)
    elif args.disable:
        try:
            NetworkManager().disable()
            print("Dnsconfd disabled successfully")
            exit(0)
        except Exception as e:
            raise(e)


    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    logging.basicConfig(level=logging.getLevelName(args.log_level))
    name = dbus.service.BusName(args.dbus_name, dbus.SystemBus())
    ctx = DnsconfdContext("/org/freedesktop/resolve1", name, vars(args))
    signal.signal(signal.SIGTERM, lambda signum, frame: ctx.signal_handler(signum))
    signal.signal(signal.SIGINT, lambda signum, frame: ctx.signal_handler(signum))
    logging.info("Starting")
    ctx.start_service()
    GLib.MainLoop().run()
